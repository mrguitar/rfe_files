lang en_US.UTF-8
keyboard us
timezone UTC --isUtc --ntpservers=rhel.pool.ntp.org
reboot
#work around for https://bugzilla.redhat.com/show_bug.cgi?id=1861456
text

#wipe existing drives
zerombr
clearpart --all --initlabel

#uncomment for a simple setup 
autopart --type=plain --fstype=xfs --nohome --encrypted --passphrase=temppass

#this will create a fixed / and use the majority of the disk for /var
#part /boot/efi --fstype=vfat --size=600
#part /boot --fstype=xfs --size=1000
#part swap --recommended 
#part / --fstype=xfs --size 30000 --encrypted --passphrase=temppass
#part /var --fstype=xfs --grow --encrypted --passphrase=temppass

#example bootloader configuration to use cgroupv2 and configuring a password of "redhat" for the bootloader.
#Note cgroupv2 is not the default for rhel 8 and using it requires crun to be used by podman instead of runc. Make sure crun is added to the blueprint and podman is properly configured to use it. 
bootloader --append="systemd.unified_cgroup_hierarchy=1" --iscrypted --password=grub.pbkdf2.sha512.10000.B55C347A1F169EB33030DE4FE60C126D5CD5489B992EFEB2F9E55CF16BE45F95A32B836C94DE935A0EC0E6B4A55661EA6BC006BC07C0767B0CC951B4BD63D88E.BE90F7868A87FBFD46C82D5B5396652185B8A30CE0832D2C273EF10BF903D775B52D64113DCDA96E3E3642E2C6F3AD010BCF7BF415EDBB2EDE1EEB48C9BBB72F

network --bootproto=dhcp

#placeholder passwords are "redhat"
rootpw --iscrypted $6$3OrUXJfD.64WiZl2$4/oBFyFgIyPI6LdLCbE.h99YBrFa..pC3x3WlHNH8mUf4ssZmhlhy17CHc0n3kAvHvWecpqunVOd/4kOGB7Ms.

#placeholder passwords are "redhat"
user --name=core --groups=wheel --iscrypted --password=$6$3OrUXJfD.64WiZl2$4/oBFyFgIyPI6LdLCbE.h99YBrFa..pC3x3WlHNH8mUf4ssZmhlhy17CHc0n3kAvHvWecpqunVOd/4kOGB7Ms.
#sshkey --username=core "ssh-rsa AAA......."

#Ensure the tar from Image Builder is served on an accessible web endpoint listed here:
ostreesetup --nogpg --osname=rhel-edge --remote=rhel-edge --url=http://192.168.81.20/ostree/repo/ --ref=rhel/8/x86_64/edge


%post

#stage updates as they become available. This is highly recommended
echo AutomaticUpdatePolicy=stage >> /etc/rpm-ostreed.conf
systemctl enable rpm-ostreed-automatic.timer

#configure clevis to unlock the luks volumes using the TPM2. 
#clevis luks bind -f -k- -d /dev/vda2 tpm2 '{}' \ <<<"temppass"
for dev in $(lsblk -p -n -s -r | awk '$6 == "crypt" { getline; print $1 }' | sort -u); do
    clevis luks bind -f -d "${dev}" tpm2 {} <<< temppass
done

%end

%post
#This is a simple example that will look for staged rpm-ostree updates and apply them per the timer if they exist
cat > /etc/systemd/system/applyupdate.service << EOF
[Unit]
Description=Apply Update Check

[Service]
Type=oneshot
ExecStart=/bin/sh -c 'if [[ $(rpm-ostree status -v | grep "Staged: yes") ]]; then systemctl --message="Applying OTA update" reboot; else logger "Running latest available update"; fi'
EOF

cat > /etc/systemd/system/applyupdate.timer << EOF
[Unit]
Description=Daily Update Reboot Check.

[Timer]
OnCalendar=*-*-* 01:30:00
#OnCalendar=Sun *-*-* 00:00:00

[Install]
WantedBy=multi-user.target
EOF

systemctl enable applyupdate.timer
%end

%post
#This is an example container workload that will take advantage of Podman's new autoupdate feature and default to crun for cgroupv2

cat > /etc/containers/containers.conf << 'EOF'
[engine]

runtime="crun"
EOF

#Add the podman timer & service

cat > /etc/systemd/system/podman-auto-update.service << EOF
[Unit]
Description=Podman auto-update service
Documentation=man:podman-auto-update(1)
Wants=network.target
After=network-online.target

[Service]
ExecStart=/usr/bin/podman auto-update

[Install]
WantedBy=multi-user.target default.target
EOF

cat > /etc/systemd/system/podman-auto-update.timer << EOF
[Unit]
Description=Podman auto-update timer

[Timer]
OnCalendar=daily
Persistent=true
RandomizedDelaySec=7200

[Install]
WantedBy=timers.target
EOF

#create a unit file to run our example workload 
cat > /etc/systemd/system/container-boinc.service <<EOF
# container-boinc.service
# autogenerated by Podman 2.0.4

[Unit]
Description=Podman container-boinc.service
Documentation=man:podman-generate-systemd(1)
Wants=network.target
After=network-online.target

[Service]
Environment=PODMAN_SYSTEMD_UNIT=%n
Restart=on-failure
ExecStartPre=/bin/rm -f %t/container-boinc.pid %t/container-boinc.ctr-id
ExecStart=/usr/bin/podman run --conmon-pidfile %t/container-boinc.pid --cidfile %t/container-boinc.ctr-id --cgroups=no-conmon -d --replace --label io.containers.autoupdate=image --name boinc -dt -p 31416:31416 -v /opt/appdata/boinc:/var/lib/boinc:Z boinc/client:latest
ExecStop=/usr/bin/podman stop --ignore --cidfile %t/container-boinc.ctr-id -t 10
ExecStopPost=/usr/bin/podman rm --ignore -f --cidfile %t/container-boinc.ctr-id
PIDFile=%t/container-boinc.pid
KillMode=none
Type=forking

[Install]
WantedBy=multi-user.target default.target
EOF


#Example workload from: https://fedoramagazine.org/running-rosettahome-on-a-raspberry-pi-with-fedora-iot/
#create host mount points
mkdir -p /opt/appdata/boinc/slots /opt/appdata/boinc/locale

systemctl enable podman-auto-update.timer container-boinc.service
%end
